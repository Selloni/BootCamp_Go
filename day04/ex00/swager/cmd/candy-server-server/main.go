// Code generated by go-swagger; DO NOT EDIT.

package main

import (

	"log"
	"os"
	"flag"
	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"day04/ex00/swager/restapi"
	"day04/ex00/swager/restapi/operations"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

type candy struct {
	name string
	price int
}

var (
	flagPort = flag.Int("port", 3333, "Port to run this service on")
	candyPrice = make(map[string]int)
)

func main() {


	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewCandyServerAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	flag.Parse()
	server.Port = *flagPort
	priceList := getPrise()
	fillMap(priceList)

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Candy Server"
	parser.LongDescription = swaggerSpec.Spec().Info.Description
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}

func getPrise() []candy {
	return []candy{
		{name: "CE",price: 10},
		{name: "AA",price: 15},
		{name: "NT",price: 17},
		{name: "DE",price: 21},
		{name: "YR",price: 23},
	}
}

func fillMap (priceList []candy) {
	for _, i := range priceList {
		candyPrice[i.name] = i.price
	}
}